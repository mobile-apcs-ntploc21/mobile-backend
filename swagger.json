{
  "openapi": "3.0.0",
  "info": {
    "title": "Orantio API Documentation",
    "version": "1.0.0",
    "description": "This is the API documentation for communicating between mobile application and the server."
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "UserProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "banner_url": {
            "type": "string"
          },
          "about_me": {
            "type": "string"
          }
        }
      },
      "RelationshipType": {
        "type": "string",
        "enum": [
          "NOT-FRIEND",
          "REQUEST-SENT",
          "REQUEST-RECEIVED",
          "FRIEND",
          "BLOCK",
          "UNDEFINED"
        ]
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Category ID",
            "example": "0123456789abcdef01234567"
          },
          "server_id": {
            "type": "string",
            "description": "The Server ID",
            "example": "0123456789abcdef01234567"
          },
          "name": {
            "type": "string",
            "description": "The Category name",
            "example": "General"
          },
          "position": {
            "type": "integer",
            "description": "The position of the Category in the Server",
            "example": 0
          }
        }
      },
      "Channel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Channel ID",
            "example": "0123456789abcdef01234567"
          },
          "server_id": {
            "type": "string",
            "description": "The Server ID",
            "example": "0123456789abcdef01234567"
          },
          "conversation_id": {
            "type": "string",
            "description": "The Conversation ID",
            "example": "0123456789abcdef01234567"
          },
          "category_id": {
            "type": "string",
            "description": "The Category ID",
            "example": "0123456789abcdef01234567"
          },
          "name": {
            "type": "string",
            "description": "The Channel name",
            "example": "General"
          },
          "description": {
            "type": "string",
            "description": "The Channel description",
            "example": "General chat"
          },
          "last_message_id": {
            "type": "string",
            "description": "The ID of the last message in the Channel",
            "example": null
          },
          "position": {
            "type": "integer",
            "description": "The position of the Channel in the Category",
            "example": 0
          },
          "last_message": {
            "$ref": "#/components/schemas/Message"
          },
          "has_new_message": {
            "type": "boolean",
            "description": "True if the Channel has a new message",
            "example": false
          },
          "number_of_unread_mentions": {
            "type": "integer",
            "description": "The number of unread mentions in the Channel",
            "example": 0
          },
          "is_nsfw": {
            "type": "boolean",
            "description": "True if the Channel is NSFW",
            "example": false
          },
          "is_archived": {
            "type": "boolean",
            "description": "True if the Channel is archived",
            "example": false
          }
        },
        "example": {
          "id": "0123456789abcdef01234567",
          "server_id": "0123456789abcdef01234567",
          "conversation_id": "0123456789abcdef01234567",
          "category_id": "0123456789abcdef01234567",
          "name": "general",
          "description": "General chat",
          "last_message_id": "0123456789abcdef01234567",
          "position": 0,
          "last_message": null,
          "has_new_message": false,
          "number_of_unread_mentions": 0,
          "is_nsfw": false,
          "is_archived": false
        }
      },
      "MessageReaction": {
        "type": "object",
        "description": "A message reaction object",
        "properties": {
          "emoji_id": {
            "type": "string",
            "description": "The ID of the emoji",
            "example": "0123456789abcdef0123456"
          },
          "count": {
            "type": "integer",
            "description": "The number of reactions",
            "example": 1
          },
          "reactors": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The IDs of the users who reacted to the message",
              "example": [
                "0123456789abcdef01234567"
              ]
            }
          }
        }
      },
      "Message": {
        "type": "object",
        "description": "A message object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The message ID",
            "example": "0123456789abcdef01234567"
          },
          "conversation_id": {
            "type": "string",
            "description": "The ID of the conversation this message belongs to",
            "example": "0123456789abcdef01234567"
          },
          "sender_id": {
            "type": "string",
            "description": "The ID of the user who sent the message",
            "example": "0123456789abcdef01234567"
          },
          "author": {
            "$ref": "#/components/schemas/UserProfile"
          },
          "content": {
            "type": "string",
            "description": "The content of the message",
            "example": "Hello, World!"
          },
          "replied_message_id": {
            "type": "string",
            "description": "The ID of the message this message is replying to",
            "example": "0123456789abcdef01234567"
          },
          "forwarded_message_id": {
            "type": "string",
            "description": "The ID of the message this message is forwarding to",
            "example": "0123456789abcdef01234567"
          },
          "mention_users": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The IDs of the users mentioned in the message",
              "example": [
                "0123456789abcdef01234567"
              ]
            }
          },
          "mention_roles": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The IDs of the roles mentioned in the message",
              "example": [
                "0123456789abcdef01234567"
              ]
            }
          },
          "mention_channels": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The IDs of the channels mentioned in the message",
              "example": [
                "0123456789abcdef01234567"
              ]
            }
          },
          "emojis": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The IDs of the emojis used in the message",
              "example": [
                "0123456789abcdef01234567"
              ]
            }
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageReaction"
            }
          },
          "replied_message": {
            "$ref": "#/components/schemas/Message"
          },
          "is_pinned": {
            "type": "boolean",
            "description": "True if the message is pinned",
            "example": false
          },
          "is_modified": {
            "type": "boolean",
            "description": "True if the message is modified",
            "example": false
          }
        }
      },
      "ServerEmoji": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The emoji ID. Encoded in 12-byte ObjectId (refer to MongoDB ObjectId).",
            "example": "0123456789abcdef01234567"
          },
          "name": {
            "type": "string",
            "description": "The emoji name.",
            "example": "smiley",
            "pattern": "^[a-zA-Z0-9_]{2,32}$"
          },
          "image_url": {
            "type": "string",
            "description": "The emoji image URL.",
            "example": "https://example.com/emoji.png"
          },
          "uploader_id": {
            "type": "string",
            "description": "The emoji's uploader ID.",
            "example": "0123456789abcdef01234567"
          }
        }
      },
      "UnicodeEmoji": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The emoji ID. Encoded in 12-byte ObjectId (refer to MongoDB ObjectId).",
            "example": "0123456789abcdef01234567"
          },
          "unicode": {
            "type": "string",
            "description": "The unicode emoji.",
            "example": "ðŸ˜Š"
          },
          "name": {
            "type": "string",
            "description": "The emoji name.",
            "example": "smiley"
          }
        }
      },
      "UserSettings": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "friendReqFromEveryone": {
            "type": "boolean"
          },
          "friendReqFromFoFriends": {
            "type": "boolean"
          },
          "friendReqFromServer": {
            "type": "boolean"
          },
          "enableNotif": {
            "type": "boolean"
          },
          "notifSound": {
            "type": "boolean"
          }
        }
      },
      "ExtendedUserProfile": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          },
          "server_id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "banner_url": {
            "type": "string"
          },
          "about_me": {
            "type": "string"
          }
        }
      },
      "UserServer": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          },
          "server_id": {
            "type": "string"
          }
        }
      },
      "StatusType": {
        "type": "string",
        "enum": [
          "ONLINE",
          "IDLE",
          "DO_NOT_DISTURB",
          "INVISIBLE",
          "OFFLINE"
        ]
      },
      "UserStatus": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/StatusType"
          },
          "last_seen": {
            "type": "string",
            "format": "date-time"
          },
          "status_text": {
            "type": "string"
          },
          "is_online": {
            "type": "boolean"
          }
        }
      }
    },
    "responses": {
      "AuthMiddlewareError": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "fail"
                },
                "message": {
                  "type": "string",
                  "enum": [
                    "You are not authorized to access this route",
                    "The user belonging to this token does no longer exist",
                    "User recently changed password, please login again"
                  ]
                }
              }
            }
          }
        }
      },
      "CheckCategoryPermissionMiddlewareError": {
        "description": "Error response when the user is not allowed to access the category.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "fail"
                },
                "message": {
                  "type": "string",
                  "example": "Forbidden"
                }
              }
            }
          }
        }
      },
      "CheckChannelPermissionMiddlewareError": {
        "description": "Error response when the user does not have the required permissions.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "fail"
                },
                "message": {
                  "type": "string",
                  "example": "Forbidden"
                }
              }
            }
          }
        }
      },
      "CheckMembershipMiddlewareError": {
        "description": "Error response when the user is not a member of the server.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "fail"
                },
                "message": {
                  "type": "string",
                  "example": "You are not a member of this server"
                }
              }
            }
          }
        }
      },
      "CheckOwnerMiddlewareError": {
        "description": "Error response when the user is not the owner of the server.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "fail"
                },
                "message": {
                  "type": "string",
                  "example": "You are not the owner of this server"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:4000/api/v1"
    }
  ],
  "paths": {
    "/friends/{id}": {
      "post": {
        "summary": "Add user with `id` as friend (Send friend request).",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful send the friend request",
            "content": {
              "application/json": {
                "example": {
                  "message": "Friend request sent."
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "cannotAddSelf": {
                    "value": {
                      "message": "You cannot add yourself as a friend."
                    }
                  },
                  "cannotAdd": {
                    "value": {
                      "message": "You cannot add this user as a friend."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove user with `id` from friends",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful remove friend",
            "content": {
              "application/json": {
                "example": {
                  "message": "Friend removed."
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "cannotRemoveSelf": {
                    "value": {
                      "message": "You cannot remove yourself as a friend."
                    }
                  },
                  "cannotRemove": {
                    "value": {
                      "message": "You cannot remove this user as a friend."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/friends/cancel/sent/{id}": {
      "delete": {
        "summary": "Cancel friend request to user with `id`",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful cancel the sent friend request",
            "content": {
              "application/json": {
                "example": {
                  "message": "Friend request cancelled."
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "cannotCancelSelf": {
                    "value": {
                      "message": "You cannot cancel friend request to yourself."
                    }
                  },
                  "cannotCancel": {
                    "value": {
                      "message": "You cannot cancel friend request to this user."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/friends/accept/{id}": {
      "post": {
        "summary": "Accept friend request from user with `id`",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful accept the friend request",
            "content": {
              "application/json": {
                "example": {
                  "message": "Friend request accepted."
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "cannotAcceptSelf": {
                    "value": {
                      "message": "You cannot accept yourself as a friend."
                    }
                  },
                  "cannotAccept": {
                    "value": {
                      "message": "You cannot accept this user as a friend."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/friends/cancel/received/{id}": {
      "delete": {
        "summary": "Cancel received friend request from user with `id`",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful cancel the received friend request",
            "content": {
              "application/json": {
                "example": {
                  "message": "Friend request cancelled."
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "cannotCancelSelf": {
                    "value": {
                      "message": "You cannot cancel received friend request from yourself."
                    }
                  },
                  "cannotCancel": {
                    "value": {
                      "message": "You cannot cancel received friend request from this user."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/block/{id}": {
      "post": {
        "summary": "Block user with `id`",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful block",
            "content": {
              "application/json": {
                "example": {
                  "message": "User blocked."
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "cannotRemoveSelf": {
                    "value": {
                      "message": "You cannot block yourself."
                    }
                  },
                  "duplicateBlock": {
                    "value": {
                      "message": "You have already blocked this user."
                    }
                  },
                  "isBlocked": {
                    "value": {
                      "message": "You have already been blocked by this user."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Unblock user with `id`",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful unblock",
            "content": {
              "application/json": {
                "example": {
                  "message": "User unblocked."
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "cannotUnblockSelf": {
                    "value": {
                      "message": "You cannot unblock yourself."
                    }
                  },
                  "notBlockYet": {
                    "value": {
                      "message": "You have not blocked this user."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/friends": {
      "get": {
        "summary": "Get all friends of the current user",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of friends",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "friends": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserProfile"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/friends/requests/received": {
      "get": {
        "summary": "Get all received friend requests of the current user",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of friends",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "friends": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserProfile"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/friends/requests/sent": {
      "get": {
        "summary": "Get all sent friend requests of the current user",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of friends",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "friends": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserProfile"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/block": {
      "get": {
        "summary": "Get all blocked users of the current user",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of blocked users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "friends": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserProfile"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/relationship/{id}": {
      "get": {
        "summary": "Get relationship type between the current user and user with `id`",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the relationship type between the current user and user with `id`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "$ref": "#/components/schemas/RelationshipType"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment/create-order": {
      "get": {
        "summary": "Create an order for VNPay",
        "tags": [
          "Payment"
        ],
        "responses": {
          "200": {
            "description": "Successful create order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "paymentUrl": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment/return": {
      "get": {
        "summary": "Return URL",
        "tags": [
          "Payment"
        ],
        "responses": {
          "200": {
            "description": "Successful return URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment/orders": {
      "get": {
        "summary": "Get all orders",
        "tags": [
          "Payment"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieve all orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "user_id": {
                        "type": "string"
                      },
                      "order_id": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "number"
                      },
                      "status": {
                        "type": "string"
                      },
                      "created_at": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "summary": "Get the subscription of the user",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieve user subscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "string"
                    },
                    "plan_id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "start_date": {
                      "type": "string"
                    },
                    "end_date": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "summary": "Get the subscription of the user by user_id",
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieve user subscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "string"
                    },
                    "plan_id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "start_date": {
                      "type": "string"
                    },
                    "end_date": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    },
    "description": {
      "0": "S",
      "1": "e",
      "2": "r",
      "3": "v",
      "4": "e",
      "5": "r",
      "6": " ",
      "7": "E",
      "8": "m",
      "9": "o",
      "10": "j",
      "11": "i",
      "12": "s",
      "13": " ",
      "14": "m",
      "15": "a",
      "16": "n",
      "17": "a",
      "18": "g",
      "19": "e",
      "20": "m",
      "21": "e",
      "22": "n",
      "23": "t"
    },
    "/servers/{serverId}/emojis/{emojiId}": {
      "get": {
        "summary": "Retrieve a specific server emoji",
        "description": "Retrieve a specific server emoji by its ID.",
        "tags": [
          "Server Emojis"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "emojiId",
            "in": "path",
            "required": true,
            "description": "The ID of the emoji to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with the emoji details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ServerEmoji"
                }
              }
            }
          },
          "400": {
            "description": "Invalid server ID or invalid emoji ID.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Server ID and Emoji ID are required."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "404": {
            "description": "Emoji not found.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Emoji not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "patch": {
        "summary": "Update a Server Emoji",
        "description": "Use to update a server emoji by providing the emoji ID.",
        "tags": [
          "Server Emojis"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "serverId",
            "in": "path",
            "required": true,
            "description": "The ID of the server to update the emoji in.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emojiId",
            "in": "path",
            "required": true,
            "description": "The ID of the emoji to update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The new emoji name to update.",
                    "example": "smiley2"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update server emoji.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerEmoji"
                }
              }
            }
          },
          "400": {
            "description": "Invalid server ID, emoji ID, or name.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Server ID, emoji ID, and name are required."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "404": {
            "description": "Emoji not found.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Emoji not found."
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Server Emoji",
        "description": "Use to delete a server emoji with the given emoji ID.",
        "tags": [
          "Server Emojis"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "serverId",
            "in": "path",
            "required": true,
            "description": "The ID of the server to delete the emoji from.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emojiId",
            "in": "path",
            "required": true,
            "description": "The ID of the emoji to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful delete server emoji.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid server ID or emoji ID.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Server ID and Emoji ID are required."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "404": {
            "description": "Emoji not found.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Emoji not found."
                }
              }
            }
          }
        }
      }
    },
    "/servers/{serverId}/emojis": {
      "get": {
        "summary": "Retrieve all emojis in a server",
        "description": "Use to retrieve all emojis in a server by providing the server ID.",
        "tags": [
          "Server Emojis"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieve server emojis",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServerEmoji"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid server ID or server with given ID not found.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Server ID is required."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      },
      "post": {
        "summary": "Create a Server Emoji",
        "description": "Use to create a server emoji, given all the required fields.",
        "tags": [
          "Server Emojis"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serverId",
            "required": true,
            "description": "The ID of the server to create the emoji in.",
            "type": "string"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The emoji name.",
                    "example": "smiley"
                  },
                  "image_url": {
                    "type": "string",
                    "description": "The emoji image URL.",
                    "example": "https://example.com/emoji.png"
                  },
                  "uploader_id": {
                    "type": "string",
                    "description": "The ID of the user who uploaded the emoji.",
                    "example": "0123456789abcdef01234567"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful create server emoji.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerEmoji"
                }
              }
            }
          },
          "400": {
            "description": "Invalid server ID or server with given ID not found.",
            "content": {
              "application/json": {
                "example": {
                  "oneOf": [
                    {
                      "message": "Server ID, name, and image are required."
                    },
                    {
                      "message": "Server emoji limit reached."
                    },
                    {
                      "message": "Emoji name already exists."
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Failed to upload image.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Failed to upload image."
                }
              }
            }
          }
        }
      }
    },
    "/servers/{serverId}/owner/members": {
      "post": {
        "summary": "Add members to a server",
        "description": "Add members to a server. Given a list of user IDs, add them to the server.",
        "tags": [
          "Server Owner"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "An array of user IDs to add to the server.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "example": [
                "userId1",
                "userId2"
              ]
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful response with the updated server members."
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "403": {
            "$ref": "#/components/responses/CheckMembershipMiddlewareError"
          },
          "404": {
            "$ref": "#/components/responses/CheckOwnerMiddlewareError"
          }
        }
      },
      "delete": {
        "summary": "Remove members from a server",
        "description": "Remove members from a server. Given a list of user IDs, remove them from the server.",
        "tags": [
          "Server Owner"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "An array of IDs of the user to remove from the server.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "example": [
                "userId1",
                "userId2"
              ]
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful response with the updated server members."
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "403": {
            "$ref": "#/components/responses/CheckMembershipMiddlewareError"
          },
          "404": {
            "$ref": "#/components/responses/CheckOwnerMiddlewareError"
          }
        }
      }
    },
    "/servers/emojis/unicode": {
      "get": {
        "summary": "Retrieve all unicode emojis",
        "description": "Retrieve all unicode emojis.",
        "tags": [
          "Server Emojis"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with the emojis.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnicodeEmoji"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    },
    "/servers/emojis/user/{userId}": {
      "get": {
        "summary": "Retrieve all emojis by a user",
        "description": "Retrieve all emojis by a user.",
        "tags": [
          "Server Emojis"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with the emojis.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServerEmoji"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing user ID.",
            "content": {
              "application/json": {
                "example": {
                  "message": "User ID is required."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    },
    "/settings": {
      "get": {
        "summary": "Get user's settings",
        "tags": [
          "Settings"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieve user settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "message": "Settings is not in JSON format !"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      },
      "put": {
        "summary": "Update user settings",
        "tags": [
          "Settings"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful retrieve user settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "settings": {
                      "$ref": "#/components/schemas/UserSettings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    },
    "/settings/reset": {
      "put": {
        "summary": "Restore default user settings",
        "tags": [
          "Settings"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful restore user settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "settings": {
                      "$ref": "#/components/schemas/UserSettings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    },
    "/profile/me": {
      "get": {
        "summary": "Get profile of the authenticated user",
        "tags": [
          "User profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserProfile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "404": {
            "description": "User profile not found",
            "content": {
              "application/json": {
                "example": {
                  "message": "Profile not found."
                }
              }
            }
          }
        }
      }
    },
    "/profile/u/{username}": {
      "get": {
        "summary": "Get user's profile by username",
        "tags": [
          "User profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserProfile"
                }
              }
            }
          },
          "400": {
            "description": "Username is required",
            "content": {
              "application/json": {
                "example": {
                  "message": "Username is required."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "404": {
            "description": "Profile with matching username not found",
            "content": {
              "application/json": {
                "example": {
                  "message": "Profile with matching username not found."
                }
              }
            }
          }
        }
      }
    },
    "/profile/{userId}": {
      "get": {
        "summary": "Get user profile by user ID",
        "tags": [
          "User profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserProfile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "404": {
            "description": "User profile not found",
            "content": {
              "application/json": {
                "example": {
                  "message": "Profile not found."
                }
              }
            }
          }
        }
      }
    },
    "/profile/{userId}/{serverId}": {
      "get": {
        "summary": "Get user profile in a server",
        "tags": [
          "User profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "serverId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserProfile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "404": {
            "description": "User profile not found",
            "content": {
              "application/json": {
                "example": {
                  "message": "Profile not found."
                }
              }
            }
          }
        }
      }
    },
    "/profile/{serverId}": {
      "post": {
        "summary": "Create user profile in a server",
        "tags": [
          "User profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serverId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserProfile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Failed to create user profile",
            "content": {
              "application/json": {
                "example": {
                  "message": "Server error: User ID is not assigned yet. Please contact the server owner."
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update user profile in a server",
        "tags": [
          "User profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serverId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserProfile"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "examples": {
                  "uploadAvatar": {
                    "value": {
                      "message": "Failed to upload avatar. Maybe check file type."
                    }
                  },
                  "uploadBanner": {
                    "value": {
                      "message": "Failed to upload banner. Maybe check file type."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Failed to create user profile",
            "content": {
              "application/json": {
                "example": {
                  "message": "Server error: User ID is not assigned yet. Please contact the server owner."
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user profile in a server",
        "tags": [
          "User profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serverId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserServer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "value": {
                    "message": "User ID is required."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    },
    "/profile": {
      "patch": {
        "summary": "Update user profile",
        "tags": [
          "User profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUserProfile"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "examples": {
                  "uploadAvatar": {
                    "value": {
                      "message": "Failed to upload avatar. Maybe check file type."
                    }
                  },
                  "uploadBanner": {
                    "value": {
                      "message": "Failed to upload banner. Maybe check file type."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          },
          "500": {
            "description": "Failed to create user profile",
            "content": {
              "application/json": {
                "example": {
                  "message": "Server error: User ID is not assigned yet. Please contact the server owner."
                }
              }
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "summary": "Get status of the sender",
        "tags": [
          "User status"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful get the user status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStatus"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    },
    "/statuses": {
      "get": {
        "summary": "Get status of multiple users",
        "tags": [
          "User status"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "example": {
                "user_ids": [
                  "uid1",
                  "uid2"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserStatus"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    },
    "/status/{id}": {
      "get": {
        "summary": "Get status of the requested user",
        "tags": [
          "User status"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful get the requested user's status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStatus"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    },
    "/status/type": {
      "post": {
        "summary": "Update the status's type of the sender",
        "tags": [
          "User status"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/StatusType"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update the status type of the sender",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "string"
                    },
                    "type": {
                      "$ref": "#/components/schemas/StatusType"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    },
    "/status/custom": {
      "post": {
        "summary": "Update the status text of the sender",
        "tags": [
          "User status"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status_text": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update the status type of the sender",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "string"
                    },
                    "status_text": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Given a valid JWT token, return the user information",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieve user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "phone_number": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    },
    "/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "email",
                  "password"
                ],
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "age": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful register",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "phone_number": {
                      "type": "string",
                      "nullable": true
                    },
                    "created_at": {
                      "type": "string"
                    },
                    "last_modified": {
                      "type": "string"
                    },
                    "jwtToken": {
                      "type": "string"
                    },
                    "refreshToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "missingFields": {
                    "value": {
                      "message": "Missing required fields"
                    }
                  },
                  "duplicateEmail": {
                    "value": {
                      "message": "Email already exists"
                    }
                  },
                  "duplicateUsername": {
                    "value": {
                      "message": "Username already exists"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "Given a valid email and password, return the user information",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "User ID"
                    },
                    "username": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "phone_number": {
                      "type": "string",
                      "nullable": true
                    },
                    "jwtToken": {
                      "type": "string"
                    },
                    "refreshToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "missingFields": {
                    "value": {
                      "message": "Missing required fields"
                    }
                  },
                  "invalidCredentials": {
                    "value": {
                      "message": "Invalid email or password"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/refresh": {
      "post": {
        "summary": "Given a valid refresh token, return a new JWT token and refresh token. Also remove the old refresh token from database",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "User ID"
                    },
                    "jwtToken": {
                      "type": "string"
                    },
                    "refreshToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "example": {
                  "message": "Invalid token"
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "summary": "To log out user, remove the current user refresh token from database",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful logout",
            "content": {
              "application/json": {
                "example": {
                  "message": "Logout success"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "message": "Missing required fields"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthMiddlewareError"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Friends"
    },
    {
      "name": "Payment"
    },
    {
      "name": "Subscriptions"
    },
    {
      "name": "Server Emojis"
    },
    {
      "name": "Settings"
    },
    {
      "name": "User profile"
    },
    {
      "name": "User status"
    },
    {
      "name": "Users"
    }
  ]
}